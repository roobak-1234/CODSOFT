# -*- coding: utf-8 -*-
"""Recommendation System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VXHfgyzC6mAIpMn8zNiLywpUBCJTcLvU
"""

user_ratings = {
    'User1': {'Item01': 5, 'Item02': 3, 'Item03': 4, 'Item04': 4, 'Item05': 1},
    'User2': {'Item01': 3, 'Item02': 1, 'Item03': 2, 'Item04': 3, 'Item05': 3},
    'User3': {'Item01': 4, 'Item02': 2, 'Item03': 3, 'Item04': 4},
    'User4': {'Item01': 3, 'Item02': 5, 'Item03': 4, 'Item04': 2},
    'User5': {'Item01': 5, 'Item02': 4, 'Item03': 4, 'Item04': 5, 'Item05': 3},
}

from math import sqrt

def pearson_similarity(user1_ratings, user2_ratings):
    common_items = set(user1_ratings.keys()).intersection(user2_ratings.keys())

    num_common = len(common_items)
    if num_common == 0:
        return 0


    mean_user1 = sum(user1_ratings[item] for item in common_items) / num_common
    mean_user2 = sum(user2_ratings[item] for item in common_items) / num_common


    numerator = sum((user1_ratings[item] - mean_user1) * (user2_ratings[item] - mean_user2) for item in common_items)
    denominator1 = sqrt(sum((user1_ratings[item] - mean_user1)**2 for item in common_items))
    denominator2 = sqrt(sum((user2_ratings[item] - mean_user2)**2 for item in common_items))

    if denominator1 == 0 or denominator2 == 0:
        return 0

    correlation = numerator / (denominator1 * denominator2)
    return correlation

def recommend_items(user_id, user_ratings, num_recommendations=5):

    similarities = {}
    for other_user_id, other_ratings in user_ratings.items():
        if other_user_id != user_id:
            similarity = pearson_similarity(user_ratings[user_id], other_ratings)
            similarities[other_user_id] = similarity


    sorted_similarities = sorted(similarities.items(), key=lambda x: x[1], reverse=True)


    top_similar_users = [user for user, sim in sorted_similarities[:num_recommendations]]


    recommendations = {}
    for user in top_similar_users:
        for item, rating in user_ratings[user].items():
            if item not in user_ratings[user_id]:
                if item not in recommendations:
                    recommendations[item] = 0
                recommendations[item] += rating * similarities[user]


    sorted_recommendations = sorted(recommendations.items(), key=lambda x: x[1], reverse=True)

    return sorted_recommendations[:num_recommendations]

target_user = 'User1'
recommendations = recommend_items(target_user, user_ratings)

print(f"Recommendations for {target_user}:")
for item, score in recommendations:
    print(f"- {item} (score: {score})")