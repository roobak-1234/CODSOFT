# -*- coding: utf-8 -*-
"""FACE DETECTION AND  RECOGNITION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1niQq5JG8HpdTvhxx-PN_JFAm4iGNbpII
"""

!pip install mtcnn
!pip install facenet-pytorch

import os
from mtcnn.mtcnn import MTCNN
import cv2
import matplotlib.pyplot as plt

def detect_faces(image_path):
    detector = MTCNN()
    if not os.path.exists(image_path):
        raise FileNotFoundError(f"Image not found at: {image_path}")

    image = cv2.imread(image_path)
    if image is None:
        raise ValueError(f"Failed to load image from: {image_path}. Check if the file is corrupted or in an unsupported format.")

    result = detector.detect_faces(image)
    return result

import numpy as np
import torch
from facenet_pytorch import InceptionResnetV1, MTCNN, extract_face
from PIL import Image, ImageDraw


device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = InceptionResnetV1(pretrained='vggface2').eval().to(device)

def recognize_faces(image_path):
    image = Image.open(image_path)


    mtcnn = MTCNN(select_largest=False)
    boxes, probs = mtcnn.detect(image)

    if boxes is not None:

        draw = ImageDraw.Draw(image)
        for box in boxes:
            draw.rectangle(box.tolist(), outline=(255, 0, 0), width=3)


        faces = [extract_face(image, box, image_size=160) for box in boxes]
        faces = np.stack(faces)
        faces = torch.tensor(faces).to(device)


        embeddings = model(faces)



    return image

def main(image_path):

    detections = detect_faces(image_path)


    recognized_image = recognize_faces(image_path)


    plt.figure(figsize=(10, 8))
    plt.imshow(recognized_image)
    plt.axis('off')
    plt.show()

if __name__ == '__main__':
    image_path = 'path_to_your_image.jpg'
    main(image_path)